@page "/"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Shared.Services.IAuthService AuthService

<div class="w-100 h-100 full-div">
    <div class="d-flex justify-content-center align-items-center w-100 h-100 cont">
        <button type="button" class="btn btn-warning" id="authButton" onclick="modalauth" data-toggle="modal" data-target="#authModal">Autentificare</button>
        <div class="message">
            <h1>„Un om fără vot este un om fără protecţie.”</h1>
            <h3>LYNDON JOHNSON</h3>
        </div>
        <div class="image">
        </div>
    </div>
</div>


<div class="modal" id="authModal" tabindex="-1" role="dialog" aria-labelledby="authModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content shadow rounded border-0">
            <div class="modal-header bg-warning text-center">
                <h4 class="modal-title text-white w-100 font-weight-bold py-2">Autentifica-te</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true" class="text-white">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="login" class="font-weight-bold">Introduceti CNP-ul</label>
                    <input type="text" class="form-control" id="login" name="login" @bind="cnp" autocomplete="off" placeholder="CNP..." required />
                </div>
            </div>
            <div class="modal-footer justify-content-center">
                <a type="button" class="btn btn-outline-warning waves-effect" @onclick="SendCnp">Autentificare</a>
            </div>
        </div>
    </div>
</div>


@code {
    private string cnp;


    protected async Task SendCnp()
    {

        var result = await AuthService.Login(cnp);

        if (result.succes)
        {
            NavigationManager.NavigateTo("/home", true);
        }
        else
        {
            NavigationManager.NavigateTo("/", true);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        bool LoggedIn = await AuthService.LoggedIn();

        if(LoggedIn)
        {
            NavigationManager.NavigateTo("home", true);
        }
    }

    public class Citizen
    {
        public Guid ID { get; set; }

        public string CNP { get; set; }

        public string LastName { get; set; }

        public string FirstName { get; set; }

        public string Sex { get; set; }

        public string Address { get; set; }

        public string County { get; set; }

        public string City { get; set; }

        public Guid VotedFor { get; set; }
    }

    public class Response
    {
        public bool succes { get; set; }

        public string Token { get; set; }

        public Citizen citizen { get; set; }
    }
}
